{
  "id": "fibonacci",
  "prompt": "Write a function `fibonacci(n)` that returns the n-th Fibonacci number. The Fibonacci sequence is defined as follows: the first number is 0, the second number is 1, and each subsequent number is the sum of the two preceding ones. For example, the sequence starts: 0, 1, 1, 2, 3, 5, 8, 13, 21, ...\n\nYour function should handle inputs of n >= 0 and should be efficient for large values of n.",
  "tests": [
    "assert fibonacci(0) == 0",
    "assert fibonacci(1) == 1",
    "assert fibonacci(2) == 1",
    "assert fibonacci(3) == 2",
    "assert fibonacci(4) == 3",
    "assert fibonacci(5) == 5",
    "assert fibonacci(10) == 55",
    "assert fibonacci(20) == 6765",
    "assert fibonacci(30) == 832040",
    "assert fibonacci(40) == 102334155"
  ],
  "solutions": [
    "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)",
    
    "def fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    
    "def fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n]",
    
    "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    
    "def fibonacci(n):\n    def matrix_multiply(A, B):\n        a = A[0][0] * B[0][0] + A[0][1] * B[1][0]\n        b = A[0][0] * B[0][1] + A[0][1] * B[1][1]\n        c = A[1][0] * B[0][0] + A[1][1] * B[1][0]\n        d = A[1][0] * B[0][1] + A[1][1] * B[1][1]\n        return [[a, b], [c, d]]\n    \n    def matrix_power(A, n):\n        if n == 1:\n            return A\n        if n % 2 == 0:\n            return matrix_power(matrix_multiply(A, A), n // 2)\n        else:\n            return matrix_multiply(A, matrix_power(matrix_multiply(A, A), (n - 1) // 2))\n    \n    if n == 0:\n        return 0\n    F = [[1, 1], [1, 0]]\n    return matrix_power(F, n)[0][1]"
  ]
} 